#+include: frontmatter.org org
#+TITLE: Reaction to "The Story of Mel"
- Started writing: <2015-08-03 Mon>
- Posted: <2015-08-21 Fri>
- Estimated time to read: 5 min

For the uninitiated "[[https://www.cs.utah.edu/~elb/folklore/mel.html][The Story of Mel]]" is a free verse poem (usenet,
hacking) that describes a programmer so in tune with the hardware he
programs for that he writes directly in machine code.  No compiler
necessary, language, what language? Just Op codes and registers.  I
recently became acquainted with this piece of usenet folklore from a
link to a blog [[http://jamesseibel.com/blog/?p%3D109][explaining how Mel pulled off his feats of grandeur]].  I
don't want to repeat that here, rather I would like to highlight some
issues with venerating programmers like Mel, and what lessons I think
that Mel's story can teach us about modern programming.

To be clear, Mel approached programming not as an exercise in the
abstract, but as an engineering task.  The way that the term "software
engineer" conjures images of men with true grit composing electrons to
build virtual bridges or skyscrapers; taking their lunch casually
1500ft from certain death.  Mel wasn't programming so much as he was
configuring a machine of infinite possibility to play blackjack with
potential customers.

While there is no hard evidence, it is likely that Mel is Mel Kaye,
who also wrote a [[compiler%20for%20the%20LGP-30][compiler for the LGP-30]]. For the purposes of this
article I'm going focus on Mel's method (writing directly in hex) for
programming blackjack on the RPC-4000.  An immediate consequence of
Mel's method is that it is impossible for another programmer to pick
up and immediately understand.  Certainly other RPC-4000 programmers
could dissect his code and start to understand his meaning, but in
writing in the raw hexadecimal[fn:1] Mel obfuscates his meaning.  This
completely removes the human element from his task.

Computer programs are expressions of ideas first, and produce results
when run on machines second.  If this order is confused, or the first
part ignored, the whole enterprise falls apart.  Indeed, when Ed
Nather is tasked with finding a bug in Mel's program it takes him
weeks to dissect what is happening, and ultimately he gives up after
finally grokking a non-infinite infinite loop.  

At this point, some audience members may be thinking "uh oh I know
where he's going" and think that the rest of the discussion will be
about the importance of writing and maintaining documentation.  I want
to argue the opposite. Good documentation is very important, but when
it comes to writing code that humans can read, documentation should
take a back seat to clear code.

What do I mean by clear code? I mean approaching the problem the way
one approaches writing literature.  After all, computer programs are
first ways to communicate ideas, and second something a machine
understands[fn:2]. If we take this attitude when writing code then
becomes an exercise in editing.

Taking this perspective, instead of the success condition being "it
does what I want" and "if it ain't broke don't fix it" there is a
framework for how to approach development.  The idea that your first
draft is getting your ideas on the page and refining from there
replaces the "once it works I'm done." You would never publish the
first draft, in the same way that you should never publish the first
working version of a program.  In the parlance of test driven design,
this is the refactor of "[[http://www.jamesshore.com/Blog/Red-Green-Refactor.html][Red, Green, Refactor]]".

So how does Mel fit into this perspective? Mel understood the machine
he was writing code for inside out.  This is valuable, and should not
be abandoned completely at the cost of making computer code
understandable by humans. It is where and how Mel's tricks should be
used that make the difference.  

One of the amazing things about a computer is how it is suited for
layers of abstraction.  One can follow these layers up and down until
they are either reasoning about problems in number theory or looking
at how the silicone is laid out to allow a particular junction to
work.  If you understand the quirks of the lower level system very
well (as Mel did), then there may be opportunities to implement
changes to the compilers that would take advantage of those quirks.
Then when other programmers used the compiler, they would all benefit
from Mel's low level understanding of the system. 

For instance, Mel exploited the time it took for the drum memory to
rotate to avoid a time-delay loop when interfacing with the
[[https://en.wikipedia.org/wiki/Friden_Flexowriter][Flexowriter]] (the IO interface to the RPC-4000).  This meant that he
could orchestrate things so that the minimum amount of time was used
in waiting for the Flexowriter to be ready to print the next character
of output.  This is a clever optimization, and if Mel had been able to
incorporate it as an optimization for the Fortran compiler, then
everyone would have been able to benefit from this trick.  This would
allow everyone coding on the RPC-4000 to enjoy faster programs without
worrying about the intricacies of drum memory. Instead, Mel wrote
these optimization tricks directly into his code, allowing it to
outperform the equivalent Fortran compiler, and impress potential
clients.  This later was the apparent win for the company that
justified Mel's unorthodox approach to programming.

What have we (hopefully) learned from analyzing this piece of Usenet
lore? Knowing the computer inside out from top to bottom is valuable.
This knowledge can be used to make computers run programs really fast.
It is better to apply this knowledge to a system that everyone will
benefit from rather than one programmer.  And finally it is important
to write clear code that other people understand.


[fn:1] The closest modern equivalent would be writing the elf by hand
in Linux, or an executable (.exe) on Windows
[fn:2] Depending where in the chain you draw the line... Almost all
languages are compiled or interpreted, meaning what the programmer
writes gets processed by another program who's job is to make the
computer do something.
